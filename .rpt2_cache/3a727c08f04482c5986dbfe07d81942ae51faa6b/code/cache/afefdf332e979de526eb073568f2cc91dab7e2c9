{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nlet ConfigurationService = class ConfigurationService {\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    loadConfiguration() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let http = this.injector.get(HttpClient);\r\n            const data = yield http.get(`http://localhost:1478/api/Organization/GetConfigurations`).toPromise();\r\n            this.configuration = Object.assign({}, data);\r\n            //localStorage.setItem('load_hr', this.configuration.features.ess);\r\n        });\r\n    }\r\n    get baseUrl() {\r\n        return \"http://localhost:1478/\";\r\n    }\r\n    get reportBaseUrl() {\r\n        return this.configuration.reportBaseUrl;\r\n    }\r\n    get dateFormat() {\r\n        return this.configuration.dateFormat;\r\n    }\r\n    get gridTransformDateFormat() {\r\n        return this.configuration.gridTransformDateFormat;\r\n    }\r\n    get pCalendarDateFormat() {\r\n        return 'dd/mm/yy';\r\n    }\r\n    get dateTimeFormat() {\r\n        return this.configuration.dateTimeFormat;\r\n    }\r\n    get datePipeCulture() {\r\n        return this.configuration.datePipeCulture;\r\n    }\r\n    get reportUrl() {\r\n        return this.configuration.reportUrl;\r\n    }\r\n    get loadHr() {\r\n        //console.log(this.configuration.features.ess);\r\n        return this.configuration.features.ess;\r\n    }\r\n    get authorityUrl() {\r\n        return this.configuration.authority;\r\n    }\r\n    get googleSiteKey() {\r\n        return this.configuration.googleSiteKey;\r\n    }\r\n};\r\nConfigurationService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [Injector])\r\n], ConfigurationService);\r\nexport { ConfigurationService };\r\n//# sourceMappingURL=configuration.service.js.map","map":{"version":3,"file":"configuration.service.js","sourceRoot":"","sources":["../../src/app/service/configuration.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAKlD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAIhC,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;IAErC,iBAAiB;;YACtB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACzC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC,SAAS,EAAE,CAAC;YAEpG,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAC7C,mEAAmE;QACpE,CAAC;KAAA;IAED,IAAI,OAAO;QACV,OAAO,wBAAwB,CAAC;IACjC,CAAC;IAED,IAAI,aAAa;QAChB,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;IACzC,CAAC;IACD,IAAI,UAAU;QACb,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;IACtC,CAAC;IAED,IAAI,uBAAuB;QAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC;IACnD,CAAC;IAED,IAAI,mBAAmB;QACtB,OAAO,UAAU,CAAC;IACnB,CAAC;IAED,IAAI,cAAc;QACjB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC;IAC1C,CAAC;IAED,IAAI,eAAe;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;IAC3C,CAAC;IAED,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;IACrC,CAAC;IAED,IAAI,MAAM;QACT,+CAA+C;QAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC;IACxC,CAAC;IAED,IAAI,YAAY;QACf,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;IACrC,CAAC;IAED,IAAI,aAAa;QAChB,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;IACzC,CAAC;CACD,CAAA;AAzDY,oBAAoB;IAFhC,UAAU,EAAE;qCAMkB,QAAQ;GAJ1B,oBAAoB,CAyDhC;SAzDY,oBAAoB"}}
